{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "InstanceType": {
      "Description": "Server instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro",
        "t2.small"
      ],
      "ConstraintDescription": "Must be a valid EC2 type."
    },
    "YourIP": {
      "Description": "Your IP address in CIDR format + '/32'",
      "Type": "String"
    },
    "KeyPair": {
      "Description": "The EC2 Key Pair",
      "Type": "AWS::EC2::KeyPair::KeyName"
    }
  },
  "Resources": {
    "EngineeringVpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/18"
      }
    },
    "EngineeringInternetGateway": {
      "Type": "AWS::EC2::InternetGateway"
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {"Ref": "EngineeringVpc"},
        "InternetGatewayId": {"Ref": "EngineeringInternetGateway"}
      }
    },
  
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "EngineeringVpc"
        }
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "GatewayId": {
          "Ref": "EngineeringInternetGateway"
        }
      },
      "DependsOn": [
        "EngineeringInternetGateway"
      ]
    },
    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {"Ref": "EngineeringVpc"},
        "CidrBlock": "10.0.0.0/24",
        "AvailabilityZone": {"Fn::Select" : [ "0", { "Fn::GetAZs" : { "Ref" : "AWS::Region" }}]}
      }
    },
    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {"Ref": "EngineeringVpc"},
        "CidrBlock": "10.0.1.0/24",
        "AvailabilityZone": {"Fn::Select" : [ "1", { "Fn::GetAZs" : { "Ref" : "AWS::Region" }}]}
      }
    },
    "PublicSubnet1RTassoc": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnet1"
        }
      }
    },
    "WebInstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": ["sts:AssumeRole"],
              "Effect": "Allow",
              "Principal": {"Service": ["ec2.amazonaws.com"]}                  
            }              
          ]          
        },          
        "ManagedPolicyArns": ["arn:aws:iam::aws:policy/AmazonS3FullAccess"]
      }    
    },
    "WebInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [{"Ref": "WebInstanceRole"}]
      }    
    },
    "web1": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {"Ref": "InstanceType"},
        "KeyName": {"Ref": "KeyPair"},
        "ImageId": "ami-01cc34ab2709337aa",
        "SubnetId": {"Ref": "PublicSubnet1"},
        "IamInstanceProfile": {"Ref": "WebInstanceProfile"},
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": ["", [
              "#!/bin/bash\n",
              "yum update -y && yum install -y git httpd php && service httpd start && chkconfig httpd on && aws s3 cp s3://seis665-public/index.php /var/www/html/\n"
            ]]
          }
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "web1"
          }
        ]
      }
    },
    "web2": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {"Ref": "InstanceType"},
        "KeyName": {"Ref": "KeyPair"},
        "ImageId": "ami-01cc34ab2709337aa",
        "SubnetId": {"Ref": "PublicSubnet2"},
        "IamInstanceProfile": {"Ref": "WebInstanceProfile"},
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": ["", [
              "#!/bin/bash\n",
              "yum update -y && yum install -y git httpd php && service httpd start && chkconfig httpd on && aws s3 cp s3://seis665-public/index.php /var/www/html/\n"
            ]]
          }
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "web2"
          }
        ]
      }
    },
    "WebserversSG": {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupName": "WebserversSG",
        "VpcId": {"Ref": "EngineeringVpc"},
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": {"Ref": "YourIP"}
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "GroupDescription": "Security group for web servers"
      }
    },
    "EngineeringWebservers": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "VpcId": {"Ref": "EngineeringVpc"},
        "Port": 80,
        "Protocol": "HTTP",
        "TargetType": "instance",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckPort": "80",
        "HealthCheckPath": "/"
      }
    },
    "EngineeringLB": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "DependsOn": "AttachGateway",
      "Properties": {
        "Subnets": [
          {"Ref": "PublicSubnet1"},
          {"Ref": "PublicSubnet2"}
        ],
        "SecurityGroups": [{"Ref": "WebserversSG"}],
        "Type": "application"
      }
    },
    "LBListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {"Ref": "EngineeringWebservers"}
          }
        ],
        "LoadBalancerArn": {"Ref": "EngineeringLB"},
        "Port": 80,
        "Protocol": "HTTP"
      }
    }
  },
  "Outputs": {
    "WebUrl": {
      "Description": "The DNS name of the load balancer",
      "Value": {"Fn::GetAtt": ["EngineeringLB", "DNSName"]}
    }
  }
}